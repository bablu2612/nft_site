Moralis.Cloud.define("getUserItems", async (request) => {

    const query = new Moralis.Query("EthTokenBalance");
    query.equalTo("contract_type", "ERC1155");
    query.containedIn("owner_of", request.user.attributes.accounts);
    const queryResults = await query.find();
    const results = [];
    for (let i = 0; i < queryResults.length; ++i) {
      results.push({
        "token_object_id": queryResults[i].id,
        "token_id": queryResults[i].attributes.token_id,
        "token_address": queryResults[i].attributes.token_address,
        "symbol": queryResults[i].attributes.symbol,
        "token_uri": queryResults[i].attributes.token_uri,
      });
    }
    return results;
  });

Moralis.Cloud.define("getItemsForSale", async (request) => {
  
    const query = new Moralis.Query("ItemsForSale");
    const queryResults = await query.find();
    const results = [];
    for (let i = 0; i < queryResults.length; ++i) {
      const token_uri_query = new Moralis.Query("EthTokenBalance");
      token_uri_query.equalTo("token_address", queryResults[i].attributes.tokenAddress);
      let token_uri = await token_uri_query.find();
      results.push({
        "token_objectId": queryResults[i].objectId,
        "askingPrice": queryResults[i].attributes.askingPrice,
        "tokenAddress": queryResults[i].attributes.tokenAddress,
        "uid": queryResults[i].attributes.uid,
        "token_uri": token_uri[0].attributes.token_uri,
      });
    }
    return results;
  });